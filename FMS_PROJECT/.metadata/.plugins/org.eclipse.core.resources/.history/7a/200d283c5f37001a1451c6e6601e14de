package com.capgemini.fms_jpahibernate.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.Query;

import com.capgemini.fms_jpahibernate.dto.LoginBean;
import com.capgemini.fms_jpahibernate.exception.FmsException;

public class AdminDAOImpl implements AdminDao {

	EntityManager entityManager = null;
	EntityTransaction transaction = null;
	EntityManagerFactory entityManagerFactory = null;

	LoginBean admin = new LoginBean();

	public boolean loginAdmin(String name, String password, String type) throws FmsException {
		entityManagerFactory = Persistence.createEntityManagerFactory("fms");
		entityManager = entityManagerFactory.createEntityManager();
		String jpql = "from LoginBean where adminName =:id and password =: pwd and type =: type";
		Query query = entityManager.createQuery(jpql);
		query.setParameter("id", name);
		query.setParameter("pwd", password);
		query.setParameter("type", type);
		try {
			@SuppressWarnings("unchecked")
			List<LoginBean> record = query.getResultList();
			if (record != null && record.size() > 0) {
				return true;
			}
		} catch (Exception e) {
			transaction.rollback();
			throw new FmsException("Admin not LoggedIn");
		}
		// transaction.commit();
		entityManager.close();
		return false;
	}

	public boolean clientSignUp(LoginBean admin) throws FmsException {
		try {
			entityManagerFactory = Persistence.createEntityManagerFactory("fms");
			entityManager = entityManagerFactory.createEntityManager();
			transaction = entityManager.getTransaction();
			transaction.begin();
			entityManager.persist(admin);
			transaction.commit();
		} catch (Exception e) {
			transaction.rollback();
			throw new FmsException("Enter valid details");
		}
		entityManager.close();
		return true;
	}

	public boolean schedularSignUp(LoginBean admin) throws FmsException {
		try {
			entityManagerFactory = Persistence.createEntityManagerFactory("fms");
			entityManager = entityManagerFactory.createEntityManager();
			transaction = entityManager.getTransaction();
			transaction.begin();
			entityManager.persist(admin);
			transaction.commit();
		} catch (Exception e) {
			transaction.rollback();
			throw new FmsException("Enter valid details");
		}
		entityManager.close();
		return true;
	}
}